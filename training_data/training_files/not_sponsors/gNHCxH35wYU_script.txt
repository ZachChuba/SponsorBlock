fast hosts find out more about them later today we're gonna do hello world on the Mega Drive following on from the last video so this was a cross products mega drive development kit with mega CD kit built in from around 90 to 93 I use this to create Tanglewood which is the Sega Mega Drive that was released last year and the whole thing was written in 68,000 assembly language using all my own editor tools and things that I've written to go with the engine so for the past couple of videos we've been showing very slowly how to get hello world on the Mega Drive everything from initializing the system to loading pallets to it and today we're going to show how to load graphic styles to it and hopefully get some text on screen doesn't have any kind of text-mode system on it it doesn't have any built-in fonts it doesn't run an operating system nor does it have any kind of standard library machine comparable the time would have been the Apple Macintosh which have had a printf function would have had its own built-in system fonts and stuff to do that the mega drives got nothing when you switch it on the memory is empty you have to do everything yourself we have to design our own font we have to upload those font glyphs to the video memory we then have to write our own text routines to get text on the screen for now we're just going to keep it simple we're going to create a very basic font ourselves we're going to show how to world on the screen the Megadrive has a file based graphics processor so it doesn't have a bitmap system or a frame buffer you can't draw lines or vectors on it the screen is made up of tiles and in this particular set of those 40 tiles wide and 30 tiles high and each tile is 8 by 8 pixels wide with each entry in that tile relating to a palette entry so we've already uploaded the palette so palette 0 is always transparent so we ignore that so say we've got red green and blue as colors 1 2 & 3 and the palette to populate the tile we need to put 1 1 1 1 for the top row of that tile to be red the rest would be 0 which would be transparency so I'll give us a single horizontal line at the top this should be 8 by 8 but can't draw very well so to place this tile onto the screen within each plane we have a grid so we would have multiple tiles uploaded to video memory we could reference number 0 1 2 3 etc so for each of these cells on the screen we would have 1 2 tile 7 there and if we upload a blank tile first and the rest would be zero and they would show nothing so it's imagine that style one relating to this tile on the screen and that's color one relating to this color in the palette and that's how the graphics are made up on screen there are two strolling planes on the Mega Drive so we can have multiple tiles overlapping each other we also scroll those planes independently we could also scroll each individual line of those plates we can make wavy effects etc there's also the sprite plane on top of that and the window plane but we explain those in a future video so in the previous video we've already shown step one which was how to upload the palette so we've got a palette here 16 colors just for the remind of the first one is always transparency this is e e which is white this is red green and the rest of these are all black so that palette is uploaded to video RAM using this macro here set serum right so that sets up the graphics processor to receive data at a colorama address which we specify there here we move 15 which is 16 minus 1 ready for the loop counter we set the serum address we want to write 2 which is 0 which is the first pallet we load the pallet into an address register and then we loop over each word in the pallet and upload it to the VB big data port we then use this command here to set the background color to 2 which gave us a red screen or orange screen on YouTube so we're going to do something very similar for the tiles first we need to design our own tile so these tiles are 32 bytes with each nibble that's a half byte relating to a color in the palette so we're going to have 8 pixels for this top row and it's 8 pixels down so 2 three four five six seven eight and that'll give us a blank tile we can then fill this in with the glyphs let's do an X pattern just to show it off and each one of these nipples relates to a color number in the palette so who've got transparencies there Oh white red green blue so we're going to go from white which is color one so for each of the pixels we want to be white we fill in one so it's a bit like ask your this isn't it is yes very much like ASCII art we're going to ignore the right hand from the bottom hand column because these tiles are adjacent to each other so we want to gap in between okay so there's our X pattern and we are going to upload this to the first address in vram that's where all the tiles are stored so we're going to need the set V RAM right macro decide to address 0 but before we do that I'm going to do some more defined at the top here submit the code easier to read we've got the size of our palette in bytes words and long so we're going to do the same again for the tile the size of a tile in bytes is 32 bytes size of tile in words is size tile bytes over 2 and size of tile in Long's is size tile bytes over four so that makes our code a little easier to read so very similar to how we uploaded the pallet here we're going to move the size of the tile in long words - one for the loop counter into register d0 we're going to call our macro to set the vram address so set vram right and we're going to go for the very first time on screen zero about the top left then that would be the entire screen because the whole screen is already filled with zeros so they're all all tiles on the screen it could be referencing tile zero so if we upload our exes tiles zero the whole screen is gonna be full of X's and that's because up here we've already cleared for you Ram set me around white zero we've looped through the whole of VRAM setting it to zero so we're going to load our tile into an address register 0 we're gonna then create a loop tile right loop and then for each long word in that tile and increment the address every time we're gonna write that to the VDP data port and then decrement and branch our loop character which is d0 back up to the tile right loop if all goes well that should give us a full screen full of X tiles so let's assemble that and then load up in the debugger so this is sending it to them yeah sending it to the dev kits and using the debugger to control the dev kit so we'll load the binary we'll reset the C for you now we have our source on screen the executables loaded on to the debugger so step one is to connect the debugger write the TM s s signature which let's just use the GPU we then load the register table which sets up the GPU here is where we clear the RAM here is where we wrote the pallet in the last video so just below this is our new code where we're going to write the tiles so if I set a breakpoint here and then run that's now executing on the Megadrive and we've already got up to this point here when we stopped so if I step through this one by one I could show you what's going on so we move the size of the tile that we're going to write in long words minus one for the loop counter into d0 so that's seven there we're going to set the vram port to receive address zero we're going to load the address of our tile that we've just written into address register a zero and then for each long word in the tile we're going to write it to the VDP data port and then increment the address each time and then loop until it's all completed so I'm going to set another breakpoint under to where that's finished and then if I continue on that should do all of that there we go so there's our screen full of X tiles so that's step one step two we're going to need more than one style so we're gonna need to design a font for this we will leave the first tile blank which is a bit wasteful because we've already cleared hold of be around so the first tiles already blank but this is a good teaching tool to see so now we're going to need glyphs for all of the text in hello world so we're going to need H and E and L and aw and our and a date let me just design all those font cliffs so we're going to need an H in red this is gonna take some considerable time says our H there's our e there's an elf you have to do this for Tanglewood then did you have to design it would be fun I did originally for the first system from that I made just to show debugging info on screen and that sort of stuff but once I made my own graphics tool sets I will manage to import all the fonts there's our Oh there's a 1 kW [Applause] how do you are [Applause] [Music] there's an even one here are [Applause] [Music] and the world's worst day we Saturday probably Addie first find out if it's Addie okay so there we have our space and H and E and L and Oh a W and R and a D so in order to reference those tiles we can do some defines to make this easier so if we have tile ID space is tile zero file ID H is gonna be one does that purely come down to what order they appear in that list then yes because we're going to upload those consecutively each tile will be next to each other in vram so you can then refer to these by indices d-57 I'm also gonna add the count so you can refer back to it so it max tiles it's gonna be eight throughout that help okay so now we need to upload all of these tiles to be round not just the first one so we've got a count here max tiles so we're just going to update our loop to update all eight of them so size tile in lungs multiplied by the number of tiles minus one for the loop counter so if we assemble that and run it we should now have a blank screen again because our first tile in memory is a blank tile that we're going to be used for the space so that's full of tile id0 and tile ID zero is completely blank so the next step so as I explained before we've got several planes on the Mega Drive and a plane a beat plane we've also got sprites and window planes as well but we're going to ignore those for now so in order to show one of these tiles on screen we need to write to the particular cell the tile ID that we want to show at that cell so these planes have their own addresses in vram if we refer back to our vehicle registers table which we wrote in the first video you can see here we've got pattern table to scroll plane a the window plane and the be plane there and according to these registers I've set this up an address C zero zero zero so if we start writing address to see zero zero zero that would be the tile IDs for this particular plane back here again we're going to use our vram write macro again so set the RAM rights and instead of writing to zero we're now going to write to see zero zero zero which the address of plane a so all we need to do to show one of these tiles at the start of plane a which is zero zero in the top left hand corner is to write the tile index that we want to show file ID H to the VDP data port so that will write the ID of tile H to the start of plane a and hopefully so we reset the processor and if we run that now there we go there's our H in the top left-hand corner so we're most of the way there now we just need to do some copying and pasting so we don't need to set the vram to write to the next address every time because calling to our VDP register table we've got the auto increment register set to 2 bytes so every time we write to the VDP is going to automatically increment the address by 2 bytes and each cell here is 2 bytes wide that's perfect for us so let's copy that h-e-l-l-o space wo rld again doing the space is a bit wasteful because this space and the VDP data should already be blank but instead of recomputing the right address ready for the w it's a lot quicker to just write the space again w d so let's assemble that and fingers crossed I'll most any of this up again and there's the money shot with a wonky our first house is a uk-based web find out more by following the link in the description below 