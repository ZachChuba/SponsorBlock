So as many of you know I've created a time machine but it broke so now I can only talk Figuratively about time travel and if I were to travel back in time and tell my younger self five things I wish I knew when I was him. This is what that would be Thing number 1, there is no secret sauce to learning how to code I remember emailing people around my age or maybe even Older trying to figure out how they learned how to code like I thought it was some secret some giant secret That you either had it or you didn't. I didn't understand that you actually had to learn and learn and learn and learn Until I could actually get to being a mediocre programmer I thought I was going to be able to figure out how to be a programmer overnight That's kind of, in all honesty, when I was younger, that's kind of how I thought it worked I was trying to figure out that secret sauce something that would make it easy to get to that success. That's Not true with anything in life. Nothing will.. there... There's not gonna be any secret sauce Unless you're some type of chef Something I did a lot when I was first learning programming was jumping from language to language And I just kind of learned the basics of each language, but never really excelled in any of those languages. Advice number two That would have to be "specialize" It's okay to understand other tools and other languages, but Specialize in what you want to do. If it's iOS development, specialize in Swift and the tools that you use in order to create  iOS Applications If you want to do Java enterprise applications, learn the tools in the language for that specialize, specialize, specialize, because once you get to that level of "Look, I'm pretty good at Java development." Then you can jump over to Swift development or C++ or Python. Just focus on one language, one toolset, one type of Application that you're working on, and see that through until you get to a level that is competent And you know more than just the basics; something that you actually understand what's going on, instead of just writing code. Tip number 3, "Use Google." 
I get this question asked all the time It's like "do programmers in that professional field," whether whatever your title may be "Do they use things like Stack Overflow and tutorials online to kind of help them out with a particular problem?" The answer is yes. Use Google to figure out What bug you're trying to fix, what problem you're trying to solve. If you're having a syntax problem You run into a bug or you can't figure out how to implement a particular feature in an app Google it. Try to figure out how to do it Otherwise, what are you gonna do? Just sit on your hands and hope that it gets done on its own There's really no other alternative. Everyone thinks that programmers just type on their keyboard and boom There's a giant application right there in front of you know No. They use whatever resources that is that they have at hand, whether that be a book or Google. All right. We're going to take a quick intermission. That is a candy intermission I'm not sure if I've told you guys this before, but I think I have a little problem I'm harshly, slightly, maybe Incredibly addicted to candy. I just have the biggest sweet. This is actually how I eat, nerds. I have a problem, I know. Alright. Now that I'm getting the sugar-high going, let's get into tip number four and that is "Programming is problem-solving not typing code."
Think of languages as tools in your tool-belt But you need to figure out how to solve the problem at hand Using your programming language. So don't think of programming as just typing code, think of programming as critical thinking Deconstructing a problem in order to formulate a solution That is programming the sooner you realize that the better you'll be. And the way I want to finish off this video is Very much intentional, because I want this to be the thing that you take away from this video and start doing right now Tip number five is "Just build it." 
Stop reading stuff online Stop watching YouTube videos, just Build IT. If you find a problem in an application that you want to build, then start building that. If the first thing you need to figure out how to do is set up a landing page for a website, look how to set up a landing page for a website. If you're building an iOS application, and you need to figure out how to do login and sign up, look up how to do login and sign up Don't try to find a whole entire application just follow through the tutorial, figure out what you want in your particular application Build a foundation for the application, and then start adding in what you need as a part of that application. If you don't know where to start, well, then you need to learn the basics of that tool set, that programming language and that. But if you've already built a small-scale iOS application for example Step it up a little bit Step it up to the application that you have in your head After all you probably didn't get into iOS development, or whatever type of development you're going after just to learn it. Most of you all probably have an idea in your head that you want to create So once you have created two or three small apps like a little calculator app or what have you Work on that dream app if you will. Start working on that Even if you don't know how to do it So if you just like I said if you don't know how to implement a particular feature Then you can find some type of Advice or tutorial online, and then you suit it to your needs You make it work for you JUST BUILD IT That is gonna be the best way to learn.
If you're one of those few people who don't have an app idea in your head That you want to create that's okay Don't worry about that Create a small app following some type of tutorial and then start adding your own custom features into it Imagine you have a game like "Flappy Bird," what are a few other things that you can add into "Flappy Bird" like coins or different lives Or leaderboards. I don't know what "Flappy Bird" had, maybe it did have all this stuff, but maybe you can add in some little Mario Plant-eaters that come out of those pipes that flappy bird has to go through or something like that, you know what I mean? So just add in some type of feature If you don't have an idea already in your head.
Third time's a charm. JUST BUILD IT Stop looking. Stop reading. Build it. Alright guys. That's all I have for you If you are new here and you like the content that you see on this channel Go back look on my channel to see if you actually like the content make sure you hit that subscribe button remember the first 500 of y'all that sign up using the link in the Description get two months of "Skillshare" for free. That does three things That gives you free "Skillshare." Free knowledge if you will. It helps me, because the more people who interact with that link down there and sign up for "Skillshare" The more likely "Skillshare" will continue to support the channel. And three it helps "Skillshare," because they want you on their platform It's a win-win all around that's kind of why I do these things. If you have any questions, like always, leave them down below I read every single comment that comes on this channel. I will answer every single question that warrants an answer Have a good one. Peace.
Didn't wanna hit the mic there And I can't turn off the camera from that way 