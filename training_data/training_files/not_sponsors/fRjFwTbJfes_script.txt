this video was sponsored by curiosity stream home to over 2,500 documentaries and nonfiction titles for curious minds since 1924 the FBI has been managing a huge collection of fingerprints taken from people all around the nation by the year 2000 they had a few hundred million sets of fingerprints and storage in the beginning way before all the cool technology we have today they simply store these fingerprints and filing cabinets thousands of them and every day they would receive tens of thousands of requests to do fingerprint comparisons which as you can guess was no easy task manually finally when computers and more advanced technology came into the scene they could start storing files electronically but even by the 90s they were still having some problems each set of fingerprints took up about 10 megabytes of storage but it wasn't actually storing these that was the issue but rather transmitting them to computers around the nation with all the requests coming in occasionally from remote locations where connections were extremely slow they weren't able to transmit the digital images fast enough so they needed some way to reduce the file sizes the algorithm developed by the FBI along with some government funded labs became a standard and how fingerprint images were stored and transferred a deep look at the mathematics of this technique is way beyond a 15 minute YouTube video but we can get a very good idea for the general concept and how they manage to reduce the necessary storage by a factor of 20 so let's see what they did as I send the applications of matrices video which I'll reference a few times here a digital image when you zoom in it's just made up of a bunch of pixels each of a specific color and those colors are represented by some numerical value now for this video like that previous one we will only be worried about grayscale images where we can have black white and a continuous spectrum of different shades of gray so pictures like these now to send a digital image we could just send the numerical value associated with every single pixel which would then be reconstructed on the other end but that's a lot of information and we need something much better to understand the algorithm that was used we first need to realize that we can make any image from this all the way to this or the Mona Lisa or whatever using sine waves if that seems super weird don't worry it did to me too at first because it doesn't even seem like images and these functions mix but here's how they do first I'm gonna graph Z equals cosine X which will yield a 3d plot that looks like this all this is is a regular cosine curve extended in an extra dimension but we sort of don't really care about the 3d aspect because what I'm going to do is color the top of this black the bottom will be white and there will be continuous fade in between so a spectrum of gray and we're gonna look at this from the top view only what we have here is a 2-dimensional cosine curve it's an image that oscillates back and forth in one direction but in color rather than height and you'll notice it's constant along the y axis if I instead graph z equals cosine of Y then we get the same thing but the colors are constant in the X direction and change in the Y direction if I increase the frequency then we get faster changes in color and lower frequencies correspond to slower changes now if I graph cosine of X plus y then the color stay constant along a 45-degree angle this is what we really care about cosine of some number U times X plus another number V times y when u and V are the same we get what we see here the colors are angled at 45 degrees or 135 depending on your reference and as I increase u while decreasing V you'll notice that the angle changes as well as the frequency in this case until we get to V equals zero where the colors are oriented vertically like we saw before now if we take let's say cosine of X and cosine of 2y then combine them we get a slightly more complex image whose equation is cosine X plus cosine 2y if we then add in something like cosine point 5x plus 0.3 Y we get this it gets more chaotic it turns out if you kept doing this with just the right functions usually an infinite amount you could create any greyscale image you wanted so yes any picture you see can be thought of as a bunch of 2d sinusoids added up there will be different coefficients associated with these that has to do with the magnitude of each image but I'm not as concerned with that here then if your image has let's say a cosine of X in it which I'll write as cosine of 1x plus 0y so we can just see the coefficients we can represent this simply by using a U and V axis and a dot at 1 comma 0 1 for the U and 0 for the V so for any cosine of U X plus V Y we can just use points to say which use and these are present in our image this means for cosine of Y there'd be a point at 0 comma 1 and cosine of X plus y would yield a point at 1 comma 1 and you'll notice that's scaling a point on this graph or in what we call the frequency domain leads to a different frequency in the spatial domain and rotation in the frequency domain leads to rotation in the spatial domain by the way just for a few upcoming parts notice a point on the vertical axis here corresponds to an image with horizontal edges and the opposite would be true as well so now you know what an image will look like based on a single point located on the Fourier transform graph but like we saw before real images are made up of usually in FLE many of those sinusoids therefore their frequency domain will consist of infinitely many points I know this probably looks like nonsense and it is just a random 2d Fourier transform graph but just realize these are a bunch of really small dots that represent all the many many sinusoids in some function and the bright spot here means most sinusoids lie in this area in this case with the u and v fairly close to 0 so now what do you think this 2d Fourier transform will look like for this image here no this is not the same as what we saw before the images before had a fade from black to white and vice versa but this has distinct edges so if I use an online Fourier transform program I found then we get this graph here again this looks strange but here the bright spot we care about is actually a horizontal line of points these are pretty much all the sinusoids that make up the image here might be like cosine of 0.5 X plus 0y no y component cuz it's on the x axis but then there's cosine of 0.5 1 X 0.5 2 X and so on we got to combine all these sinusoids to get the Striped image on the left and this makes some sense because points along that horizontal line correspond to vertical edges like I mentioned before if I then replace the striped image with a more complex and very famous one in the image processing community we get a more hectic 2d Fourier transform but there's still visible info here like these slanted streaks in the frequency domain correspond to slanted edges in the original image like these two here correspond to the legs of the tripod the program I'm using allows me to actually remove any part of the frequency domain and you'll see if i black out those regions then reassemble the image without those sinusoids we get roughly the same thing with some distortion but the legs have been smeared you could say and they're definitely not black like before now I'm gonna use a different image for this next part just because it works better but what I'm gonna do is take the Fourier transform and apply a low-pass filter this means I'm going to keep or pass all the sinusoids where u and V are close to zero but I'm gonna remove everything else aka the sinusoids with faster oscillations and then I'm gonna reconstruct the image then I'll do the same thing but the opposite where I'll keep only the higher frequencies so what do you think is gonna happen in each case well I think it's easier to see this when you imagine a normal curve that's made up of several cosines added up because if you remove some of those higher frequencies you lose the fine details in your signal those little oscillations but you keep the overall picture there's your hint in that you can still see hey this looks similar to a square wave but if you instead remove the lower frequencies then you kind of lose that big picture but you keep all the fine details or those faster oscillations so back to our image if we remove the high frequencies aka the fine detail we get this it's simply a blurred version of the original picture we can still interpret what this is like that previous curve but when I say we lost the little details I mean the edges that's what blurring really does it smooths out the quick changes in color which is what an edge is in fact in another video I showed a different technique for blurring and I did it with the number one here the blurred image is outlined just to show the general shape is still there but the main takeaway was that the very defined edge from black to white that made the number easy to read became smooth out by the blurring creating this fade from dark to light and for our technique this thing pretty much happened high-frequency sinusoids with fast changes in color that create those defined edges were removed leaving sinusoids with more of a fade and slower transitions giving us an overall blurred image so a low-pass filter is really just a blur filter now if we go back to our image and do the opposite keep the high frequencies but remove the lower ones we then only keep the find details or those edges so we lost most of the picture but the edges are still there which is why a high-pass filter can be considered an edge detection filter and decades ago edge detection was used by law enforcement to catch someone guilty of assault by analyzing an image of their arm to reveal a very specific tattoo so yeah this does have important applications now we're pretty much there but we just need to acknowledge the fact that sinusoids actually don't handle edges and quick changes very well whether it be for an image or a signal as you can see by these extra unwanted spikes on the corner here so to deal with functions or pictures that have very abrupt changes we want something more localized that doesn't oscillate forever which is actually the main issue with sinusoids to help with this we use something called a wavelet these are like sinusoidal pulses that decay to zero pretty quickly rather than oscillate forever now just like before we can scale or shift these and even though the equation is more complicated it leads to a simpler function representation in the end I'll call the general equation for a wavelets I because it turns out with just scaling and shifting we can sum up several to infinitely many wavelets to create the function we want whether it be a curve or an image just like before and if we take the coefficients associated with those wavelets and transmit those rather than the pixel values of an image we have a main aspect of the wavelet scalar quantization algorithm which is finally what this video was about it's quite complex with several components but hopefully this gave you a general idea of how image processing works in relation to sine waves Fourier analysis and separating an image into its components with those coefficients because these general concepts extend to wavelet analysis and that compression algorithm even though there are of course differences sending those coefficients does lead to a smaller file size compared to other compression methods with very minimal loss of information by the way and when someone on the receiving and wants the fingerprint to be displayed a computer just uses those coefficients to reconstruct the image again any deeper analysis is really links are below and with that I'm gonna end that video there things is always to my supporters on patreon social media links are down below and I'll see you guys in the next video 