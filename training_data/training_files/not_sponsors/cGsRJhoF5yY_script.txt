do you have a whiteboard in your house where you leave messages for other members of the household perhaps you were posting notes on a board or bits of paper on the fridge with fridge magnets to leave notes that say buy milk pay bills and other things you want people to pay attention to but what if you want to update the message board when you're not in the house well today i've got the solution because i'm going to tell you how to build a diy e-paper internet of things message board my original plan was to use a raspberry pi or another low-power single board computer simply plugged into a monitor and then share a google doc and if you've ever used google docs you'll know that multiple people can edit it and it updates in real time so that means everybody could update the document there's even a mobile app for doing so and that would update the message board and that seems like a really easy solution it's not that simple unfortunately the main problem is that you need to have a monitor switched on which would consume power all the time because of the backlight it would also illuminate the house at night you could have it going to power save but then no one would see the board unless they got access to move the mouse to wiggle it to wake it up to see what was there it's not quite the same as writing on a whiteboard where it's just there and you see it as you walk past so then i looked for e-paper displays and e-paper displays a rather recent piece of technology they use them in kindle e-readers and basically there's no backlight and it only uses power when it updates it's got a very low refresh rate of about two hertz so you can't really watch movies on it but it doesn't use any power unless it updates and basically you can power it down and walk away unplug it from a computer and the message still stays displayed there for several days or weeks so that seems like an ideal solution until i looked at the prices of hdmi e-paper displays and the only one i could really find available in the uk was from wave share and it's about 500 and in the uk it's about 500 pounds so i carried on looking and apparently there's a smaller model which is pictured working with a raspberry pi it's about a tenth of the price there's only seven and a half inches but that'll be good enough so bought one of them and let's have a look at it so i've got my e-paper display it's actually very thin indeed and obviously no backlight so just the display this is the surface where the display appears comes with this cable and it comes with a hat for a raspberry pi and this has got an adapter on the plugs onto the 40 pin gpio header and it also has another breakout here for the spi pins so i've enabled the spi on my raspberry pi and i was hoping that something would appear on the display so i've got my raspberry pi booted it's got a display but yeah nothing on my e-paper so why can't that be because it's not that simple unfortunately there doesn't seem to be a way to make this spi display be the main display for your raspberry pi or whatever else you plug it into however if we look on the wave share wiki it does tell you about what you need to install in terms of drivers and there's also some python code and there's also arduino examples so that you can actually display something on this e-paper display but it would appear we need to write some code to display stuff rather than just plugging it in and using it as a monitor so i've installed all the drivers from the wave share wiki and cloned everything from github i need and now there's various examples in a folder which are for different size screens by the look of it but you need to pick the one for the screen you've got and the one i've got is a seven and a half inch v2 apparently let's run that and we should see eventually that the paper goes and clears and every time it does this or initializes it kind of flashes black and white and now it says hello world you'll see that up here and it does this initialization all the time whenever you try and put text on it for some reason and i haven't been able to hack the examples to make this go away and just update the text but anyway it does work it says hello world it's done first horizontal then vertical a piece of graphics and then it clears it and everything stops i ran that example again then i just pressed control c halfway through so just killed the example and didn't clear it at the end so now you can see we've still got this written on here i've disconnected it from the raspberry pi there's absolutely no power but the display is still there so that's pretty good it's just like a piece of paper basically that you can read obviously no backlight is just readable in daylight which is pretty good so that seems to work well and looks really good for our application now i did leave it disconnected for about three days and the display was still absolutely perfect i'm not sure how long it takes until it fades away but for a message board you update every few days it should be perfect the e-paper clearly works but how are we gonna update it from a mobile or from a web page or somewhere in the cloud but now it's back to this e-paper and i think this seems like a good opportunity to learn some python scripting [Music] i 3d printed a case for that and it's just a frame that holds the e paper and that's held in with some sticky pads on the back and there's a base there to hold the raspberry pi and the hat and of course all we really need is the power cable going in because this is going to be the display for the main thing that we're going to build but how we're going to make it into an internet of things device and get that data and display on the display well i really like the idea of using a google doc as the cloud service because it's really accessible and easy to update already has mobile apps and of course you can update it through the web page so after a quick google search i found the google docs api which allows you to write code that can read or write to google docs and also to google drive i also found a really great guide and there are several out there but a few of them are quite out of date now i'll put a link in the video description to the one i use which is from 2020 and the guide tells you how to go about setting up the google docs api and granting access to a google doc for your own application this involves creating a service account which you share your google doc with and then the service account gets permissions to your google doc either to read it or to edit it the google developer console generates a security key which you download to the device you want to run the code on and that allows authentication with the google doc you just share your google doc with the service user and that completes giving access to your own code to read and write to the google doc and the guide i've put in the description also has some sample python code that shows you how to read and write to google docs so you can access it for your own code and that's exactly what we need to do to read the google doc once it's been updated and write it to our e-paper so i've also integrated the e-paper code and that api to actually write to the e-paper from wave share and a few other bits and pieces so let's have a look at the code that i'm using so first of all i've created my google sheet and that's got one column in it which has got all the stuff i'm going to put on my message board and this neatly fits on the message board with the size font i'm going to use and this is shared with my service user and i'm the owner so i can update it and save it over on my raspberry pi i've created a folder in my home directory called sheets and i've got two versions of the code but first of all there's two other folders one of those is the wave share library that's got all of the library stuff in for different size screens and the other one is the pick folder which is also from wave share i've taken everything out apart from the true type font that's used to generate the text so my version one folder i've got my certificate that downloaded that's the key for authentication i won't show you the contents but essentially that downloads from the google developer console and i've also got my python script so let's have a look at that a lot of this stuff is from the wave share api and the sample code from the guide that i shared these two lines are for the library and the pic directory i just showed you and various other things here to check those are there and import all of the stuff from them this is the font we're going to be using which is size 35 which neatly fits on the display and this is the stuff for importing the google spreadsheet api and authenticating with it as well if we scroll down a bit we open the message board which is the sheet called message board and we get the data and that's very easy it's one line which gets the worksheet in column zero i've got 15 variables which import the 15 rows in that column and that puts them into variables called a1 through to a15 then we've got the stuff that's taken straight from the e-paper display and what i'm doing is just drawing text using those same 15 variables and at the end we put the display to sleep which is what it did in the original example so now if we run that example we should see the e-paper update with the stuff i just put in my message board spreadsheet it takes a little while to pull the data in and then renders the display and there it is that was pretty easy to code and it seems to work well whenever i run that script it pulls in the data from the google doc and writes it onto my e-paper now the plan is going to be to schedule this so it runs every five or ten minutes and that means it'll update whenever anyone updates the google doc but at the moment it's going to update the display every five or ten minutes it's going to re-initialize it do that flashing and then write the same data back to it regardless of whether there's any new data in the google doc or not and it could be that no one puts anything new on the message ball for several days and of course one of the advantages of the e-paper is it doesn't use power until you update it so we don't really want to be updating every five minutes even if there's no new messages so i've written a version two of the code and that writes the data to a csv file on the sd card of the raspberry pi each time pulls the data in the next time compares the two and if there's any changes then it updates the e-paper otherwise it leaves it alone in my version 2 folder i've still got that json file which is the security key and now i've got my log csv as well which logs the old values so if we now look at my version 2 code we can find we've got a few extra things so we've got the ability here to read and write to a csv file and it does that here by opening the file and going through all of the rows and those variables are called a1 old through a 15 old and this gets written at the end of the code as well so we write the old values and then we read them at the beginning again to compare them so again we're getting the values from the spreadsheet and then we're writing those values a1 through a15 to that csv file after we've got the new data then we do a comparison using an if statement to check if any of them are different then we do the e-paper writing and you can see that's an indented code block which is part of this if statement otherwise we just print to the console there's no new data and we leave the e-paper display well alone i've scheduled that up using cron tab e and that means that we can put a schedule on something to run so we're actually doing it here is running every five minutes so we'll run on the hour and then five past ten past 15 past and so on if we change that number to a 10 it would do every 10 minutes and that runs a bash script which is in the folder called sheet sh and that lives in my home folder and it looks like this so it says it's a bash script goes into the correct folder and types the commands that i would type anyway which is python three sheet o2 pi and that runs the python script so that will run every five minutes i'm pretty happy with how that works i've had it in my house for a few days updating it periodically and it seems to update the data pretty reliably on the next five minute interval after you update the google doc and it always seems to connect and work this is a raspberry pi 4 but of course it's not very taxing on the resources so you probably could run it on any raspberry pi with a 40 pin gpio header and i think that comes all the way down to a raspberry pi 2 which would be much lower power so it seems like quite a useful thing i've learned quite a lot doing it and i'm going to put all the cad and the code in the description to this video it's on github and links to the articles that i featured in this video if you'd like to support me through patreon or youtube channel membership then those links are in the description below and patrons and youtube channel members get all the videos up to a week early so don't forget to check that out if you'd like to support the channel there's more stuff coming up like this and more serious robotics so don't forget to like and subscribe alright that's all for now [Music] [Applause] [Music] you 